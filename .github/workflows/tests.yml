name: CI—Integration-Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: tests-${{ github.ref }}
  cancel-in-progress: true

jobs:
  integration-tests:
    name: Integration tests
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: ["8.3"]

    services:
      pgsql:
        image: postgres:17
        env:
          POSTGRES_DB: raafco_ims_pgsql
          POSTGRES_USER: admin
          POSTGRES_PASSWORD: admin
        options: >-
          --health-cmd "pg_isready -U admin -d raafco_ims_pgsql"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 20

      redis:
        image: redis:8
        options: >-
          --health-cmd "redis-cli ping || exit 1"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 10

      mailpit:
        image: axllent/mailpit:v1.27
        ports:
          - 8025:8025
          - 1025:1025
        options: >-
          --health-cmd "nc -z 127.0.0.1 8025 || exit 1"
          --health-interval 5s
          --health-timeout 2s
          --health-retries 10

    env:
      APP_ENV: testing
      APP_DEBUG: 1
      DB_CONNECTION: pgsql
      DB_HOST: pgsql
      DB_PORT: 5432
      DB_DATABASE: raafco_ims_pgsql
      DB_USERNAME: admin
      DB_PASSWORD: admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      MAIL_MAILER: log
      MAIL_HOST: mailpit
      MAIL_PORT: 1025

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 1

      - name: Cache PHP
        uses: actions/cache@v4
        with:
          path: /opt/hostedtoolcache/php
          key: php-${{ matrix.php-version }}

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: mbstring, bcmath, xml, curl, pdo_pgsql, zip, redis
          ini-values: memory_limit=3G

      - name: Cache Composer & vendor
        uses: actions/cache@v4
        with:
          path: |
            ~/.composer/cache
            ./src/vendor
          key: ${{ runner.os }}-composer-${{ hashFiles('src/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        working-directory: ./src
        run: composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Copy test env -> .env
        run: cp ./src/.env.testing ./src/.env

      - name: Install required CLI tools
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client iputils-ping netcat-openbsd

      - name: Ensure storage/cache permissions
        working-directory: ./src
        run: |
          mkdir -p storage bootstrap/cache
          chmod -R a+w storage bootstrap/cache

      - name: Debug network (optional)
        run: |
          echo "Checking Postgres host..."
          pg_isready -h pgsql -U admin -d raafco_ims_pgsql || echo "Postgres not ready yet"
          nc -zv pgsql 5432 || echo "Port not open"
          ping -c 1 pgsql || echo "Ping failed"

      - name: Make wait-postgres.sh executable
        working-directory: ./src
        run: chmod +x ../scripts/ci/wait-postgres.sh

      - name: Wait for Postgres to be ready
        working-directory: ./src
        run: ../scripts/ci/wait-postgres.sh

      - name: Generate APP_KEY (testing)
        working-directory: ./src
        run: php artisan key:generate --env=testing --force

      - name: Run migrations
        working-directory: ./src
        run: php artisan migrate --force

      - name: Run tests
        working-directory: ./src
        run: |
          set -o pipefail
          if php artisan test --parallel --processes=4 --verbose 2>/dev/null; then
            echo "✅ Parallel tests passed"
          else
            echo "⚠ Parallel tests failed, running serial tests"
            php artisan test --verbose
          fi

      - name: Upload test logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: laravel-logs
          path: ./src/storage/logs

      - name: Upload coverage (if generated)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: ./src/coverage.xml || true
